================================================================================
                        AGAPE EDU CRM - PROJECT OVERVIEW
================================================================================

TABLE OF CONTENTS
-----------------
1. What Is This Project?
2. Technology Stack
3. Project Folder Structure
4. How The Application Works
5. Database & Models
6. Authentication & Authorization
7. Major Features & Modules
8. Installation & Setup Guide
9. Running the Project
10. Important Configuration Files


================================================================================
1. WHAT IS THIS PROJECT?
================================================================================

Agape EDU CRM is a Customer Relationship Management (CRM) system specifically 
designed for educational institutions, particularly those that help students 
with international education and university admissions.

Main Purpose:
-------------
- Manage student leads (prospective students who inquire about education services)
- Track student information like contact details, preferred universities, study level
- Assign leads to counselors or managers for follow-up
- Monitor lead status (new, contacted, qualified, converted, rejected)
- Provide role-based dashboards for owners, managers, and counselors
- Export lead data to Excel for reporting
- Search and filter leads efficiently

Think of it as a customer database + task manager + analytics dashboard 
combined into one system to help educational institutions manage their 
prospective students effectively.


================================================================================
2. TECHNOLOGY STACK
================================================================================

Backend Framework:
------------------
- Laravel 12.x (PHP framework)
- PHP 8.2 or higher

Frontend Technologies:
----------------------
- Blade Templates (Laravel's templating engine for HTML)
- Tailwind CSS 4.x (for styling and responsive design)
- Vite 7.x (for asset bundling and hot module replacement)
- JavaScript (for interactive features)
- Axios (for HTTP requests)

Database:
---------
- SQLite (default, for easy setup)
- MySQL/PostgreSQL (also supported)

Additional Libraries:
---------------------
- FastExcel (rap2hpoutre/fast-excel) - for exporting leads to Excel
- Laravel Tinker - for interactive console
- PHPUnit - for testing
- Laravel Pail - for log viewing
- Concurrently - for running multiple development servers

Development Tools:
------------------
- Composer (PHP dependency manager)
- NPM (Node.js package manager)
- Laravel Sail (optional Docker environment)
- Laravel Pint (code style fixer)


================================================================================
3. PROJECT FOLDER STRUCTURE
================================================================================

Here's what each main folder does:

/app
----
This is where your application logic lives.
- /app/Http/Controllers - Handles user requests and returns responses
  * DashboardController.php - Shows statistics based on user role
  * LeadController.php - Manages CRUD operations for leads
  * UserManagementController.php - Manages users and accounts
  * Auth/ - Handles login and logout
  
- /app/Models - Represents database tables as PHP classes
  * User.php - User accounts
  * Lead.php - Student leads
  * Role.php - User roles (owner, manager, counselor)
  * Activity.php - Tracks actions performed on leads
  
- /app/Http/Middleware - Filters requests before they reach controllers
  * CheckRole.php - Ensures users have proper permissions
  
- /app/Notifications - Sends notifications (email, database, etc.)

/routes
-------
Defines URLs and maps them to controllers.
- web.php - All web routes (login, dashboard, leads, etc.)
- console.php - Custom artisan commands

/resources
----------
Frontend assets and views.
- /resources/views - Blade templates (HTML with PHP)
  * layouts/ - Page templates (header, footer, navigation)
  * auth/ - Login pages
  * dashboard.blade.php - Dashboard view
  * leads/ - All lead management views
  * users/ - User management views
  
- /resources/css - Stylesheets
- /resources/js - JavaScript files

/database
---------
Everything related to the database.
- /migrations - Database schema definitions (tables, columns)
- /seeders - Sample data for testing
- /factories - Fake data generators for testing

/config
-------
Configuration files for different parts of Laravel.
- app.php - Application settings
- database.php - Database connections
- auth.php - Authentication settings
- mail.php - Email settings
- etc.

/public
-------
The only folder accessible from the web.
- index.php - Entry point for all requests
- Assets (CSS, JS, images) are compiled here

/storage
--------
Files generated by the application.
- /app - File uploads
- /framework - Cache, sessions, views
- /logs - Error and application logs

/bootstrap
----------
Files that initialize Laravel.
- app.php - Creates the application instance

/tests
------
Automated tests for your application.

/vendor
-------
Third-party packages installed by Composer (not included in Git).

/node_modules
-------------
Frontend packages installed by NPM (not included in Git).


================================================================================
4. HOW THE APPLICATION WORKS (Request Lifecycle)
================================================================================

Here's what happens when someone visits the website:

Step 1: Browser Request
-----------------------
User types URL in browser: http://localhost/leads
Browser sends HTTP request to the server

Step 2: Entry Point
-------------------
Request hits /public/index.php (the only PHP file the web server runs)

Step 3: Laravel Bootstrap
-------------------------
- Laravel loads /bootstrap/app.php
- Initializes the framework
- Loads configuration from /config
- Registers service providers

Step 4: Routing
---------------
- Laravel checks /routes/web.php for matching route
- Finds: Route::resource('leads', LeadController::class)
- This matches and points to LeadController

Step 5: Middleware
------------------
Before reaching the controller, request passes through middleware:
- auth middleware: Checks if user is logged in
- role middleware: Checks if user has proper permissions

Step 6: Controller Action
-------------------------
- LeadController@index method is called
- Controller queries the database using Models
- Example: Lead::with('assignedUser')->latest()->get()

Step 7: Model (Database Interaction)
------------------------------------
- Lead model represents the 'leads' table
- Uses Eloquent ORM (Object-Relational Mapping)
- Translates PHP code to SQL queries
- Fetches data from database

Step 8: View Rendering
----------------------
- Controller passes data to a Blade view
- Example: view('leads.index', compact('leads'))
- Blade template: /resources/views/leads/index.blade.php
- Blade compiles template to pure PHP
- Variables are inserted: {{ $lead->first_name }}

Step 9: Response
----------------
- HTML is generated and sent back to browser
- Browser displays the page to user

Step 10: Assets
---------------
- CSS and JavaScript are loaded from /public/build
- Vite compiles these during development


================================================================================
5. DATABASE & MODELS
================================================================================

Database Tables:
----------------

1. users
   - Stores user accounts (counselors, managers, owners)
   - Fields: id, name, username, email, password, timestamps
   
2. roles
   - Stores available roles (owner, manager, counselor)
   - Fields: id, name, description, timestamps
   
3. user_roles
   - Links users to roles (many-to-many relationship)
   - A user can have multiple roles
   
4. leads
   - Stores prospective student information
   - Fields: id, first_name, last_name, email, phone, age, city,
            passport, inquiry_date, study_level, priority,
            preferred_universities, special_notes, status,
            assigned_to, timestamps
   - Status options: new, contacted, qualified, converted, rejected
   - Priority levels: very_high, high, medium, low, very_low
   - Study levels: foundation, diploma, bachelor, master, phd
   
5. activities
   - Logs all actions performed on leads
   - Fields: id, user_id, lead_id, action, description, metadata, timestamps

6. cache, sessions, jobs
   - System tables for caching, sessions, and background jobs

Eloquent Models:
----------------
Models are PHP classes that interact with database tables:

- User Model (app/Models/User.php)
  * Has many leads (one-to-many)
  * Belongs to many roles (many-to-many)
  * Methods: hasRole(), roles(), leads()

- Lead Model (app/Models/Lead.php)
  * Belongs to User (assigned_to)
  * Methods: assignTo(), unassign(), isAssigned()
  * Scopes: assignedTo(), unassigned()

- Role Model (app/Models/Role.php)
  * Belongs to many users (many-to-many)

- Activity Model (app/Models/Activity.php)
  * Records all lead-related actions


================================================================================
6. AUTHENTICATION & AUTHORIZATION
================================================================================

Authentication (Who You Are):
-----------------------------
- Custom authentication using username or email + password
- No external packages like Laravel Breeze or Jetstream
- Login handled by AuthenticatedSessionController
- Users must log in to access the system
- Sessions stored in database

Login Process:
1. User visits /login
2. Enters username/email and password
3. System tries to authenticate with username first
4. If that fails, tries with email
5. On success, creates a session and redirects to dashboard
6. Session is stored in database and lasts 120 minutes (2 hours)

Authorization (What You Can Do):
---------------------------------
Role-Based Access Control (RBAC):

1. Owner Role
   - Full access to everything
   - Can manage users and leads
   - Sees system-wide statistics
   - Can view all leads
   
2. Manager Role
   - Can manage users (create, delete)
   - Can assign leads to counselors
   - Sees team performance metrics
   - Can view all leads
   
3. Counselor Role
   - Can view and manage assigned leads
   - Can update lead status
   - Cannot create or delete users
   - Sees only their assigned leads statistics

How It Works:
- CheckRole middleware verifies user permissions
- Routes are protected: ->middleware(['role:owner,manager'])
- Controllers check roles: if (in_array('owner', $userRoles))


================================================================================
7. MAJOR FEATURES & MODULES
================================================================================

1. Dashboard Module
-------------------
Location: DashboardController.php, dashboard.blade.php
Features:
- Role-based statistics
- Quick metrics (total leads, conversion rate)
- Recent activity overview

Owner sees:
- Total leads in system
- Weekly new leads
- Overall conversion rate

Manager sees:
- Team leads count
- Personally assigned leads
- Team performance percentage

Counselor sees:
- My assigned leads
- New assignments this week
- Follow-ups needed

2. Lead Management Module
--------------------------
Location: LeadController.php, /resources/views/leads/
Features:
- Create new leads (form with validation)
- View all leads (data table)
- Edit lead information
- Delete leads
- Search and filter leads
- Assign/unassign leads to counselors
- Update lead status
- Bulk actions (assign multiple, change status)
- Priority badges (color-coded)
- Status badges (visual indicators)

Lead Lifecycle:
new → contacted → qualified → converted
                              ↓
                          rejected

3. User Management Module
--------------------------
Location: UserManagementController.php, UserController.php
Features:
- View all users and their roles
- Create new user accounts
- Assign roles to users
- Delete user accounts
- Only accessible by owners and managers

4. Search & Filter Module
--------------------------
Location: LeadSearchController.php
Features:
- Search by name, email, phone
- Filter by status
- Filter by priority
- Filter by study level
- Filter by assignment status
- Real-time search results

5. Export Module
----------------
Location: ExportController.php
Features:
- Export all leads to Excel
- Export filtered leads only
- Uses FastExcel for performance
- Includes all lead information

6. Activity Tracking
--------------------
Location: Activity model
Features:
- Logs all lead assignments
- Logs status changes
- Records who performed actions
- Stores metadata for detailed history

7. Bulk Operations
------------------
Features:
- Select multiple leads with checkboxes
- Bulk assign to counselor
- Bulk status update
- Efficient for managing many leads at once


================================================================================
8. INSTALLATION & SETUP GUIDE
================================================================================

Prerequisites:
--------------
Before you start, make sure you have these installed on your computer:
1. PHP 8.2 or higher (check: php -v)
2. Composer (PHP package manager)
3. Node.js and NPM (check: node -v, npm -v)
4. Git (for cloning the repository)
5. A database (SQLite is included, MySQL/PostgreSQL optional)

Step-by-Step Installation:
---------------------------

STEP 1: Clone the Repository
-----------------------------
Open your terminal/command prompt and run:

    git clone https://github.com/iamdulanga/agape-edu-crm-laravel.git
    cd agape-edu-crm-laravel

STEP 2: Install PHP Dependencies
---------------------------------
This downloads all Laravel packages:

    composer install

This will create a /vendor folder with all PHP dependencies.

STEP 3: Install JavaScript Dependencies
----------------------------------------
This downloads frontend packages:

    npm install

This will create a /node_modules folder.

STEP 4: Create Environment File
--------------------------------
Copy the example environment file:

    cp .env.example .env

On Windows, use:

    copy .env.example .env

STEP 5: Generate Application Key
---------------------------------
Laravel needs a unique encryption key:

    php artisan key:generate

This updates APP_KEY in your .env file automatically.

STEP 6: Configure Database
---------------------------
Open .env file in a text editor.

For SQLite (easiest, default):
    DB_CONNECTION=sqlite
    (Comment out DB_HOST, DB_PORT, DB_DATABASE, etc.)

Create the SQLite database file:
    touch database/database.sqlite

On Windows:
    type nul > database\database.sqlite

For MySQL:
    DB_CONNECTION=mysql
    DB_HOST=127.0.0.1
    DB_PORT=3306
    DB_DATABASE=agape_crm
    DB_USERNAME=root
    DB_PASSWORD=your_password

Make sure your MySQL server is running and the database exists.

STEP 7: Run Database Migrations
--------------------------------
This creates all database tables:

    php artisan migrate

You should see output showing tables being created:
- users
- roles
- user_roles
- leads
- activities
- etc.

STEP 8: (Optional) Seed Database
---------------------------------
To add sample data for testing:

    php artisan db:seed

This creates:
- Sample roles (owner, manager, counselor)
- Test user accounts
- Sample lead data

STEP 9: Build Frontend Assets
------------------------------
Compile CSS and JavaScript:

    npm run build

For development with hot reload:

    npm run dev

(Keep this running in a separate terminal)

STEP 10: Start the Application
-------------------------------
Launch the Laravel development server:

    php artisan serve

You should see:
    Starting Laravel development server: http://127.0.0.1:8000

STEP 11: Access the Application
--------------------------------
Open your web browser and go to:

    http://localhost:8000

You should see the login page.

Default Login (if you ran seeders):
    Username: admin
    Password: password


================================================================================
9. RUNNING THE PROJECT
================================================================================

Development Mode:
-----------------

Option 1: Basic (Two Terminal Windows)

Terminal 1 - Backend Server:
    cd agape-edu-crm-laravel
    php artisan serve

Terminal 2 - Frontend Build (with hot reload):
    npm run dev

Then open: http://localhost:8000

Option 2: Advanced (One Command for Everything)

Using the composer script:
    composer dev

This runs simultaneously:
- Laravel server (localhost:8000)
- Queue worker (for background jobs)
- Log viewer (pail)
- Vite dev server (hot reload)

Common Artisan Commands:
------------------------

View all routes:
    php artisan route:list

Clear all caches:
    php artisan optimize:clear

Create a new controller:
    php artisan make:controller ControllerName

Create a new model:
    php artisan make:model ModelName

Create a migration:
    php artisan make:migration create_table_name

Run migrations:
    php artisan migrate

Rollback last migration:
    php artisan migrate:rollback

Fresh database (reset everything):
    php artisan migrate:fresh

With seeders:
    php artisan migrate:fresh --seed

Interactive console:
    php artisan tinker

Running Tests:
--------------
    php artisan test

Or using composer:
    composer test

Fixing Code Style:
------------------
    ./vendor/bin/pint

Building for Production:
------------------------
1. Set environment to production in .env:
    APP_ENV=production
    APP_DEBUG=false

2. Optimize Laravel:
    php artisan config:cache
    php artisan route:cache
    php artisan view:cache

3. Build assets for production:
    npm run build

4. Set proper permissions:
    chmod -R 755 storage
    chmod -R 755 bootstrap/cache


================================================================================
10. IMPORTANT CONFIGURATION FILES
================================================================================

.env (Environment Variables)
----------------------------
This is THE MOST IMPORTANT file for configuration.
Contains sensitive information (never commit to Git!)

Key settings:

APP_NAME - Your application name
APP_ENV - Environment (local, production)
APP_DEBUG - Show detailed errors (true for development)
APP_URL - Your application URL

DB_CONNECTION - Database type (sqlite, mysql, pgsql)
DB_HOST - Database server address
DB_DATABASE - Database name
DB_USERNAME - Database username
DB_PASSWORD - Database password

MAIL_MAILER - Email service (log, smtp, etc.)
MAIL_FROM_ADDRESS - Sender email address

SESSION_DRIVER - Where to store sessions (file, database)
QUEUE_CONNECTION - Queue driver (sync, database, redis)

composer.json
-------------
Defines PHP dependencies and scripts.
- "require" section lists production packages
- "require-dev" section lists development packages
- "scripts" section defines custom commands

package.json
------------
Defines JavaScript dependencies.
- "devDependencies" lists frontend packages
- "scripts" defines build commands

config/database.php
-------------------
Database connection configurations for different drivers.

config/auth.php
---------------
Authentication settings:
- User provider (eloquent)
- Password reset settings
- Guards and drivers

routes/web.php
--------------
All web routes with middleware protection.

bootstrap/app.php
-----------------
Application bootstrap configuration:
- Middleware registration
- Service providers
- Exception handling

vite.config.js
--------------
Vite bundler configuration:
- Input files (app.js, app.css)
- Laravel plugin setup

phpunit.xml
-----------
PHPUnit testing configuration.


================================================================================
TROUBLESHOOTING COMMON ISSUES
================================================================================

Issue: "Class not found" or autoload errors
Solution:
    composer dump-autoload

Issue: "No application encryption key has been specified"
Solution:
    php artisan key:generate

Issue: Permission denied errors
Solution (Linux/Mac):
    chmod -R 755 storage
    chmod -R 755 bootstrap/cache

Issue: SQLSTATE errors (database connection)
Solution:
    - Check .env database settings
    - Ensure database exists
    - Verify credentials
    - For SQLite, ensure database file exists

Issue: npm/Vite errors
Solution:
    rm -rf node_modules package-lock.json
    npm install
    npm run build

Issue: Migration errors
Solution:
    php artisan migrate:fresh
    (Warning: This drops all tables!)

Issue: Can't login
Solution:
    - Check if database is seeded
    - Try: php artisan db:seed
    - Or create user manually in tinker

Issue: 404 errors on routes
Solution:
    php artisan route:cache
    php artisan optimize:clear


================================================================================
PROJECT WORKFLOW SUMMARY
================================================================================

For Daily Development:
----------------------
1. Pull latest changes: git pull
2. Update dependencies: composer install && npm install
3. Run migrations: php artisan migrate
4. Start servers: composer dev OR (php artisan serve & npm run dev)
5. Make your changes
6. Test: php artisan test
7. Commit and push: git add . && git commit -m "message" && git push

For Understanding Code:
-----------------------
1. Start with routes/web.php (see available URLs)
2. Follow route to controller (app/Http/Controllers)
3. See what model is used (app/Models)
4. Check the view (resources/views)
5. Inspect database schema (database/migrations)

Request Flow Reminder:
----------------------
Browser → index.php → Laravel Router → Middleware → Controller → Model → Database
                                                                    ↓
Browser ← HTML Response ← Blade View ← Controller ← Model ← Database Query Result


================================================================================
ADDITIONAL RESOURCES
================================================================================

Official Documentation:
-----------------------
- Laravel Docs: https://laravel.com/docs
- Tailwind CSS: https://tailwindcss.com/docs
- PHP Manual: https://www.php.net/manual
- Blade Templates: https://laravel.com/docs/blade

Learning Resources:
-------------------
- Laravel Bootcamp: https://bootcamp.laravel.com
- Laracasts: https://laracasts.com
- Laravel News: https://laravel-news.com

Community:
----------
- Laravel Discord: https://discord.gg/laravel
- Laravel Forums: https://laracasts.com/discuss
- Stack Overflow: Tag [laravel]

Repository:
-----------
- GitHub: https://github.com/iamdulanga/agape-edu-crm-laravel


================================================================================
END OF PROJECT OVERVIEW
================================================================================

This CRM system helps educational institutions manage their student leads
efficiently with role-based access, comprehensive tracking, and reporting
features. It's built on solid Laravel foundations and follows best practices
for maintainability and scalability.

For questions or contributions, please refer to the repository on GitHub.

Last Updated: October 2025
